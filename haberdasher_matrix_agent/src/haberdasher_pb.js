/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.haberdasher.AgentErrorResponse', null, global);
goog.exportSymbol('proto.haberdasher.AgentRequest', null, global);
goog.exportSymbol('proto.haberdasher.AgentResponse', null, global);
goog.exportSymbol('proto.haberdasher.Empty', null, global);
goog.exportSymbol('proto.haberdasher.EstablishClientRequest', null, global);
goog.exportSymbol('proto.haberdasher.Group', null, global);
goog.exportSymbol('proto.haberdasher.Individual', null, global);
goog.exportSymbol('proto.haberdasher.Instance', null, global);
goog.exportSymbol('proto.haberdasher.ListVenuesRequest', null, global);
goog.exportSymbol('proto.haberdasher.ListVenuesResponse', null, global);
goog.exportSymbol('proto.haberdasher.Message', null, global);
goog.exportSymbol('proto.haberdasher.Performer', null, global);
goog.exportSymbol('proto.haberdasher.Venue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Empty.displayName = 'proto.haberdasher.Empty';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Empty}
 */
proto.haberdasher.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Empty;
  return proto.haberdasher.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Empty}
 */
proto.haberdasher.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.EstablishClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.EstablishClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.EstablishClientRequest.displayName = 'proto.haberdasher.EstablishClientRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.EstablishClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.EstablishClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.EstablishClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.EstablishClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    protocol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.EstablishClientRequest}
 */
proto.haberdasher.EstablishClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.EstablishClientRequest;
  return proto.haberdasher.EstablishClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.EstablishClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.EstablishClientRequest}
 */
proto.haberdasher.EstablishClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.EstablishClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.EstablishClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.EstablishClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.EstablishClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProtocol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.haberdasher.EstablishClientRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.haberdasher.EstablishClientRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.haberdasher.EstablishClientRequest.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.haberdasher.EstablishClientRequest.prototype.setProtocol = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.AgentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.haberdasher.AgentRequest.oneofGroups_);
};
goog.inherits(proto.haberdasher.AgentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.AgentRequest.displayName = 'proto.haberdasher.AgentRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.haberdasher.AgentRequest.oneofGroups_ = [[2]];

/**
 * @enum {number}
 */
proto.haberdasher.AgentRequest.KindCase = {
  KIND_NOT_SET: 0,
  LIST_VENUES: 2
};

/**
 * @return {proto.haberdasher.AgentRequest.KindCase}
 */
proto.haberdasher.AgentRequest.prototype.getKindCase = function() {
  return /** @type {proto.haberdasher.AgentRequest.KindCase} */(jspb.Message.computeOneofCase(this, proto.haberdasher.AgentRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.AgentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.AgentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.AgentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.AgentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqno: jspb.Message.getFieldWithDefault(msg, 1, 0),
    listVenues: (f = msg.getListVenues()) && proto.haberdasher.ListVenuesRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.AgentRequest}
 */
proto.haberdasher.AgentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.AgentRequest;
  return proto.haberdasher.AgentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.AgentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.AgentRequest}
 */
proto.haberdasher.AgentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqno(value);
      break;
    case 2:
      var value = new proto.haberdasher.ListVenuesRequest;
      reader.readMessage(value,proto.haberdasher.ListVenuesRequest.deserializeBinaryFromReader);
      msg.setListVenues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.AgentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.AgentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.AgentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.AgentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqno();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getListVenues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.haberdasher.ListVenuesRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 seqno = 1;
 * @return {number}
 */
proto.haberdasher.AgentRequest.prototype.getSeqno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.haberdasher.AgentRequest.prototype.setSeqno = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ListVenuesRequest list_venues = 2;
 * @return {?proto.haberdasher.ListVenuesRequest}
 */
proto.haberdasher.AgentRequest.prototype.getListVenues = function() {
  return /** @type{?proto.haberdasher.ListVenuesRequest} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.ListVenuesRequest, 2));
};


/** @param {?proto.haberdasher.ListVenuesRequest|undefined} value */
proto.haberdasher.AgentRequest.prototype.setListVenues = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.haberdasher.AgentRequest.oneofGroups_[0], value);
};


proto.haberdasher.AgentRequest.prototype.clearListVenues = function() {
  this.setListVenues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.AgentRequest.prototype.hasListVenues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.AgentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.haberdasher.AgentResponse.oneofGroups_);
};
goog.inherits(proto.haberdasher.AgentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.AgentResponse.displayName = 'proto.haberdasher.AgentResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.haberdasher.AgentResponse.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.haberdasher.AgentResponse.KindCase = {
  KIND_NOT_SET: 0,
  ERROR: 2,
  LIST_VENUES: 3
};

/**
 * @return {proto.haberdasher.AgentResponse.KindCase}
 */
proto.haberdasher.AgentResponse.prototype.getKindCase = function() {
  return /** @type {proto.haberdasher.AgentResponse.KindCase} */(jspb.Message.computeOneofCase(this, proto.haberdasher.AgentResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.AgentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.AgentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.AgentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.AgentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqno: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: (f = msg.getError()) && proto.haberdasher.AgentErrorResponse.toObject(includeInstance, f),
    listVenues: (f = msg.getListVenues()) && proto.haberdasher.ListVenuesResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.AgentResponse}
 */
proto.haberdasher.AgentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.AgentResponse;
  return proto.haberdasher.AgentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.AgentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.AgentResponse}
 */
proto.haberdasher.AgentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSeqno(value);
      break;
    case 2:
      var value = new proto.haberdasher.AgentErrorResponse;
      reader.readMessage(value,proto.haberdasher.AgentErrorResponse.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 3:
      var value = new proto.haberdasher.ListVenuesResponse;
      reader.readMessage(value,proto.haberdasher.ListVenuesResponse.deserializeBinaryFromReader);
      msg.setListVenues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.AgentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.AgentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.AgentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.AgentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqno();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.haberdasher.AgentErrorResponse.serializeBinaryToWriter
    );
  }
  f = message.getListVenues();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.haberdasher.ListVenuesResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 seqno = 1;
 * @return {number}
 */
proto.haberdasher.AgentResponse.prototype.getSeqno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.haberdasher.AgentResponse.prototype.setSeqno = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional AgentErrorResponse error = 2;
 * @return {?proto.haberdasher.AgentErrorResponse}
 */
proto.haberdasher.AgentResponse.prototype.getError = function() {
  return /** @type{?proto.haberdasher.AgentErrorResponse} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.AgentErrorResponse, 2));
};


/** @param {?proto.haberdasher.AgentErrorResponse|undefined} value */
proto.haberdasher.AgentResponse.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.haberdasher.AgentResponse.oneofGroups_[0], value);
};


proto.haberdasher.AgentResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.AgentResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ListVenuesResponse list_venues = 3;
 * @return {?proto.haberdasher.ListVenuesResponse}
 */
proto.haberdasher.AgentResponse.prototype.getListVenues = function() {
  return /** @type{?proto.haberdasher.ListVenuesResponse} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.ListVenuesResponse, 3));
};


/** @param {?proto.haberdasher.ListVenuesResponse|undefined} value */
proto.haberdasher.AgentResponse.prototype.setListVenues = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.haberdasher.AgentResponse.oneofGroups_[0], value);
};


proto.haberdasher.AgentResponse.prototype.clearListVenues = function() {
  this.setListVenues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.AgentResponse.prototype.hasListVenues = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.AgentErrorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.AgentErrorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.AgentErrorResponse.displayName = 'proto.haberdasher.AgentErrorResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.AgentErrorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.AgentErrorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.AgentErrorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.AgentErrorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.AgentErrorResponse}
 */
proto.haberdasher.AgentErrorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.AgentErrorResponse;
  return proto.haberdasher.AgentErrorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.AgentErrorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.AgentErrorResponse}
 */
proto.haberdasher.AgentErrorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.AgentErrorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.AgentErrorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.AgentErrorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.AgentErrorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.haberdasher.AgentErrorResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.haberdasher.AgentErrorResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.ListVenuesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.ListVenuesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.ListVenuesRequest.displayName = 'proto.haberdasher.ListVenuesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.ListVenuesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.ListVenuesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.ListVenuesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.ListVenuesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    withUpdatesSince: (f = msg.getWithUpdatesSince()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.ListVenuesRequest}
 */
proto.haberdasher.ListVenuesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.ListVenuesRequest;
  return proto.haberdasher.ListVenuesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.ListVenuesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.ListVenuesRequest}
 */
proto.haberdasher.ListVenuesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setWithUpdatesSince(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.ListVenuesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.ListVenuesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.ListVenuesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.ListVenuesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWithUpdatesSince();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp with_updates_since = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.haberdasher.ListVenuesRequest.prototype.getWithUpdatesSince = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.haberdasher.ListVenuesRequest.prototype.setWithUpdatesSince = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.haberdasher.ListVenuesRequest.prototype.clearWithUpdatesSince = function() {
  this.setWithUpdatesSince(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.ListVenuesRequest.prototype.hasWithUpdatesSince = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.ListVenuesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.haberdasher.ListVenuesResponse.repeatedFields_, null);
};
goog.inherits(proto.haberdasher.ListVenuesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.ListVenuesResponse.displayName = 'proto.haberdasher.ListVenuesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.haberdasher.ListVenuesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.ListVenuesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.ListVenuesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.ListVenuesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.ListVenuesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    venuesList: jspb.Message.toObjectList(msg.getVenuesList(),
    proto.haberdasher.Venue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.ListVenuesResponse}
 */
proto.haberdasher.ListVenuesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.ListVenuesResponse;
  return proto.haberdasher.ListVenuesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.ListVenuesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.ListVenuesResponse}
 */
proto.haberdasher.ListVenuesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.haberdasher.Venue;
      reader.readMessage(value,proto.haberdasher.Venue.deserializeBinaryFromReader);
      msg.addVenues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.ListVenuesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.ListVenuesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.ListVenuesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.ListVenuesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVenuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.haberdasher.Venue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Venue venues = 1;
 * @return {!Array<!proto.haberdasher.Venue>}
 */
proto.haberdasher.ListVenuesResponse.prototype.getVenuesList = function() {
  return /** @type{!Array<!proto.haberdasher.Venue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.haberdasher.Venue, 1));
};


/** @param {!Array<!proto.haberdasher.Venue>} value */
proto.haberdasher.ListVenuesResponse.prototype.setVenuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.haberdasher.Venue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.haberdasher.Venue}
 */
proto.haberdasher.ListVenuesResponse.prototype.addVenues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.haberdasher.Venue, opt_index);
};


proto.haberdasher.ListVenuesResponse.prototype.clearVenuesList = function() {
  this.setVenuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Instance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.Instance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Instance.displayName = 'proto.haberdasher.Instance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Instance.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Instance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Instance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Instance.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Instance}
 */
proto.haberdasher.Instance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Instance;
  return proto.haberdasher.Instance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Instance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Instance}
 */
proto.haberdasher.Instance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Instance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Instance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Instance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Instance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.haberdasher.Instance.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.haberdasher.Instance.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.haberdasher.Instance.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.haberdasher.Instance.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.haberdasher.Instance.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.haberdasher.Instance.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Individual = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.Individual, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Individual.displayName = 'proto.haberdasher.Individual';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Individual.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Individual.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Individual} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Individual.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Individual}
 */
proto.haberdasher.Individual.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Individual;
  return proto.haberdasher.Individual.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Individual} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Individual}
 */
proto.haberdasher.Individual.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Individual.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Individual.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Individual} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Individual.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.haberdasher.Individual.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.haberdasher.Individual.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.haberdasher.Individual.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.haberdasher.Individual.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.haberdasher.Individual.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.haberdasher.Individual.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.haberdasher.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Group.displayName = 'proto.haberdasher.Group';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Group}
 */
proto.haberdasher.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Group;
  return proto.haberdasher.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Group}
 */
proto.haberdasher.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.haberdasher.Group.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.haberdasher.Group.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.haberdasher.Group.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.haberdasher.Group.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.haberdasher.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.haberdasher.Group.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Performer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.haberdasher.Performer.oneofGroups_);
};
goog.inherits(proto.haberdasher.Performer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Performer.displayName = 'proto.haberdasher.Performer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.haberdasher.Performer.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.haberdasher.Performer.KindCase = {
  KIND_NOT_SET: 0,
  INDIVIDUAL: 1,
  SERVICE: 2,
  MYSELF: 3
};

/**
 * @return {proto.haberdasher.Performer.KindCase}
 */
proto.haberdasher.Performer.prototype.getKindCase = function() {
  return /** @type {proto.haberdasher.Performer.KindCase} */(jspb.Message.computeOneofCase(this, proto.haberdasher.Performer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Performer.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Performer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Performer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Performer.toObject = function(includeInstance, msg) {
  var f, obj = {
    individual: (f = msg.getIndividual()) && proto.haberdasher.Individual.toObject(includeInstance, f),
    service: jspb.Message.getFieldWithDefault(msg, 2, false),
    myself: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Performer}
 */
proto.haberdasher.Performer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Performer;
  return proto.haberdasher.Performer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Performer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Performer}
 */
proto.haberdasher.Performer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.haberdasher.Individual;
      reader.readMessage(value,proto.haberdasher.Individual.deserializeBinaryFromReader);
      msg.setIndividual(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setService(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMyself(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Performer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Performer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Performer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Performer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndividual();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.haberdasher.Individual.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Individual individual = 1;
 * @return {?proto.haberdasher.Individual}
 */
proto.haberdasher.Performer.prototype.getIndividual = function() {
  return /** @type{?proto.haberdasher.Individual} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.Individual, 1));
};


/** @param {?proto.haberdasher.Individual|undefined} value */
proto.haberdasher.Performer.prototype.setIndividual = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.haberdasher.Performer.oneofGroups_[0], value);
};


proto.haberdasher.Performer.prototype.clearIndividual = function() {
  this.setIndividual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Performer.prototype.hasIndividual = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool service = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.haberdasher.Performer.prototype.getService = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.haberdasher.Performer.prototype.setService = function(value) {
  jspb.Message.setOneofField(this, 2, proto.haberdasher.Performer.oneofGroups_[0], value);
};


proto.haberdasher.Performer.prototype.clearService = function() {
  jspb.Message.setOneofField(this, 2, proto.haberdasher.Performer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Performer.prototype.hasService = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool myself = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.haberdasher.Performer.prototype.getMyself = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.haberdasher.Performer.prototype.setMyself = function(value) {
  jspb.Message.setOneofField(this, 3, proto.haberdasher.Performer.oneofGroups_[0], value);
};


proto.haberdasher.Performer.prototype.clearMyself = function() {
  jspb.Message.setOneofField(this, 3, proto.haberdasher.Performer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Performer.prototype.hasMyself = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.haberdasher.Message.oneofGroups_);
};
goog.inherits(proto.haberdasher.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Message.displayName = 'proto.haberdasher.Message';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.haberdasher.Message.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.haberdasher.Message.ContentCase = {
  CONTENT_NOT_SET: 0,
  TEXT: 3,
  POSE: 4
};

/**
 * @return {proto.haberdasher.Message.ContentCase}
 */
proto.haberdasher.Message.prototype.getContentCase = function() {
  return /** @type {proto.haberdasher.Message.ContentCase} */(jspb.Message.computeOneofCase(this, proto.haberdasher.Message.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    performer: (f = msg.getPerformer()) && proto.haberdasher.Performer.toObject(includeInstance, f),
    at: (f = msg.getAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    text: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pose: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Message}
 */
proto.haberdasher.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Message;
  return proto.haberdasher.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Message}
 */
proto.haberdasher.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.haberdasher.Performer;
      reader.readMessage(value,proto.haberdasher.Performer.deserializeBinaryFromReader);
      msg.setPerformer(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setAt(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPerformer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.haberdasher.Performer.serializeBinaryToWriter
    );
  }
  f = message.getAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional Performer performer = 1;
 * @return {?proto.haberdasher.Performer}
 */
proto.haberdasher.Message.prototype.getPerformer = function() {
  return /** @type{?proto.haberdasher.Performer} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.Performer, 1));
};


/** @param {?proto.haberdasher.Performer|undefined} value */
proto.haberdasher.Message.prototype.setPerformer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.haberdasher.Message.prototype.clearPerformer = function() {
  this.setPerformer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Message.prototype.hasPerformer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.haberdasher.Message.prototype.getAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.haberdasher.Message.prototype.setAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.haberdasher.Message.prototype.clearAt = function() {
  this.setAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Message.prototype.hasAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.haberdasher.Message.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.haberdasher.Message.prototype.setText = function(value) {
  jspb.Message.setOneofField(this, 3, proto.haberdasher.Message.oneofGroups_[0], value);
};


proto.haberdasher.Message.prototype.clearText = function() {
  jspb.Message.setOneofField(this, 3, proto.haberdasher.Message.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Message.prototype.hasText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string pose = 4;
 * @return {string}
 */
proto.haberdasher.Message.prototype.getPose = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.haberdasher.Message.prototype.setPose = function(value) {
  jspb.Message.setOneofField(this, 4, proto.haberdasher.Message.oneofGroups_[0], value);
};


proto.haberdasher.Message.prototype.clearPose = function() {
  jspb.Message.setOneofField(this, 4, proto.haberdasher.Message.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Message.prototype.hasPose = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.haberdasher.Venue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.haberdasher.Venue.oneofGroups_);
};
goog.inherits(proto.haberdasher.Venue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.haberdasher.Venue.displayName = 'proto.haberdasher.Venue';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.haberdasher.Venue.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.haberdasher.Venue.KindCase = {
  KIND_NOT_SET: 0,
  INDIVIDUAL: 1,
  GROUP: 2,
  SERVICE: 3
};

/**
 * @return {proto.haberdasher.Venue.KindCase}
 */
proto.haberdasher.Venue.prototype.getKindCase = function() {
  return /** @type {proto.haberdasher.Venue.KindCase} */(jspb.Message.computeOneofCase(this, proto.haberdasher.Venue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.haberdasher.Venue.prototype.toObject = function(opt_includeInstance) {
  return proto.haberdasher.Venue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.haberdasher.Venue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Venue.toObject = function(includeInstance, msg) {
  var f, obj = {
    individual: (f = msg.getIndividual()) && proto.haberdasher.Individual.toObject(includeInstance, f),
    group: (f = msg.getGroup()) && proto.haberdasher.Group.toObject(includeInstance, f),
    service: jspb.Message.getFieldWithDefault(msg, 3, false),
    instance: (f = msg.getInstance()) && proto.haberdasher.Instance.toObject(includeInstance, f),
    lastMessage: (f = msg.getLastMessage()) && proto.haberdasher.Message.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.haberdasher.Venue}
 */
proto.haberdasher.Venue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.haberdasher.Venue;
  return proto.haberdasher.Venue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.haberdasher.Venue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.haberdasher.Venue}
 */
proto.haberdasher.Venue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.haberdasher.Individual;
      reader.readMessage(value,proto.haberdasher.Individual.deserializeBinaryFromReader);
      msg.setIndividual(value);
      break;
    case 2:
      var value = new proto.haberdasher.Group;
      reader.readMessage(value,proto.haberdasher.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setService(value);
      break;
    case 4:
      var value = new proto.haberdasher.Instance;
      reader.readMessage(value,proto.haberdasher.Instance.deserializeBinaryFromReader);
      msg.setInstance(value);
      break;
    case 5:
      var value = new proto.haberdasher.Message;
      reader.readMessage(value,proto.haberdasher.Message.deserializeBinaryFromReader);
      msg.setLastMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.haberdasher.Venue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.haberdasher.Venue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.haberdasher.Venue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.haberdasher.Venue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndividual();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.haberdasher.Individual.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.haberdasher.Group.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getInstance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.haberdasher.Instance.serializeBinaryToWriter
    );
  }
  f = message.getLastMessage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.haberdasher.Message.serializeBinaryToWriter
    );
  }
};


/**
 * optional Individual individual = 1;
 * @return {?proto.haberdasher.Individual}
 */
proto.haberdasher.Venue.prototype.getIndividual = function() {
  return /** @type{?proto.haberdasher.Individual} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.Individual, 1));
};


/** @param {?proto.haberdasher.Individual|undefined} value */
proto.haberdasher.Venue.prototype.setIndividual = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.haberdasher.Venue.oneofGroups_[0], value);
};


proto.haberdasher.Venue.prototype.clearIndividual = function() {
  this.setIndividual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Venue.prototype.hasIndividual = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Group group = 2;
 * @return {?proto.haberdasher.Group}
 */
proto.haberdasher.Venue.prototype.getGroup = function() {
  return /** @type{?proto.haberdasher.Group} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.Group, 2));
};


/** @param {?proto.haberdasher.Group|undefined} value */
proto.haberdasher.Venue.prototype.setGroup = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.haberdasher.Venue.oneofGroups_[0], value);
};


proto.haberdasher.Venue.prototype.clearGroup = function() {
  this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Venue.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool service = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.haberdasher.Venue.prototype.getService = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.haberdasher.Venue.prototype.setService = function(value) {
  jspb.Message.setOneofField(this, 3, proto.haberdasher.Venue.oneofGroups_[0], value);
};


proto.haberdasher.Venue.prototype.clearService = function() {
  jspb.Message.setOneofField(this, 3, proto.haberdasher.Venue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Venue.prototype.hasService = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Instance instance = 4;
 * @return {?proto.haberdasher.Instance}
 */
proto.haberdasher.Venue.prototype.getInstance = function() {
  return /** @type{?proto.haberdasher.Instance} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.Instance, 4));
};


/** @param {?proto.haberdasher.Instance|undefined} value */
proto.haberdasher.Venue.prototype.setInstance = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.haberdasher.Venue.prototype.clearInstance = function() {
  this.setInstance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Venue.prototype.hasInstance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Message last_message = 5;
 * @return {?proto.haberdasher.Message}
 */
proto.haberdasher.Venue.prototype.getLastMessage = function() {
  return /** @type{?proto.haberdasher.Message} */ (
    jspb.Message.getWrapperField(this, proto.haberdasher.Message, 5));
};


/** @param {?proto.haberdasher.Message|undefined} value */
proto.haberdasher.Venue.prototype.setLastMessage = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.haberdasher.Venue.prototype.clearLastMessage = function() {
  this.setLastMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.haberdasher.Venue.prototype.hasLastMessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.haberdasher);
